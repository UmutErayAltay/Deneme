# -*- coding: utf-8 -*-
"""selenium_ev_verisi_güncel.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1zN2s5u_LZ37DFDFb79oC4e6noO--G7NA
"""

!pip install selenium
!apt—get update
!apt—get Install —y chromium—browger
!apt install chromium-chromedriver

from selenium import webdriver
import time
import pandas as pd
import os

!ls /usr/lib/chromium-browser/chromedriver

def Veri_çekme(i, url):
    try:
        # Boş listeler oluşturuluyor
        birinci_özellikler = []
        ikinci_özellikler = []
        fiyat = []

        # İlgili indeksteki öğeye tıklama
        tikla = driver.find_element("xpath", '//*[@id="listing-search-wrapper"]/div[' + str(i) + ']')
        i += 1
        tikla.click()

        # Detaylı bilgilerin bulunduğu elemente tıklama
        element = driver.find_element('xpath', '//*[@id="bilgiler"]/div/div[2]/div/div[2]/span')
        driver.execute_script("arguments[0].click();", element)

        # Özellikler ve fiyatları çekme
        elements = driver.find_elements("css selector", '._2HQCBI')
        fiyatlar = driver.find_elements("css selector", '._2TxNQv')
        sayaç = 1
        for j in elements:
            if sayaç % 2 == 1:
                birinci_özellikler.append(j.text)
                birinci_özellikler.append("\n")
            else:
                ikinci_özellikler.append(j.text)
            sayaç += 1
        toplu_dizi = birinci_özellikler + ikinci_özellikler

        for j in fiyatlar:
            fiyat.append(j.text)

        # Konum bilgisini çekme
        element = driver.find_elements("css selector", '._3VQ1JB')
        toplu_dizi.append("\nKonum\n")
        konumlar = ["Osmangazi", "Nilüfer", "Yıldırım", "Büyükorhan", "Gemlik", "Gürsu", "Harmancık", "İnegöl",
                     "İznik", "Karacabey", "Kestel", "Mudanya", "Mustafakemalpaşa", "Orhaneli", "Orhangazi", "Yenişehir"]
        for j in konumlar:
            if element[0].text.find(j) != -1:
                toplu_dizi.append(j)

        # Fiyatı düzenleme
        fiyat_sade = fiyat[1].strip()
        fiyat_sade = fiyat_sade.replace("TL", "")
        fiyat_sade = fiyat_sade.replace(".", "")
        fiyat_sade = fiyat_sade.replace(",", "")

        # Arrow_downward veya arrow_upward içeren ifadeleri temizleme
        for i in range(100):
            if fiyat_sade.find("arrow_downward%" + i.__str__()) != -1 or fiyat_sade.find(
                    "arrow_upward%" + i.__str__()) != -1:
                fiyat_sade = fiyat_sade.replace("arrow_downward%" + i.__str__(), "")
                fiyat_sade = fiyat_sade.replace("arrow_upward%" + i.__str__(), "")
        fiyat_sade = int(fiyat_sade)

        içerikler = []
        içerikler.append([fiyat_sade])
        det_str = listToString(toplu_dizi)
        ayrı = det_str.split("\n")

        başlıklar = []
        özellikler = []
        sayaç = 1
        for i in ayrı:
            if sayaç % 2 == 1:
                başlıklar.append(i)
            else:
                özellikler.append(i)
            sayaç += 1
        başlıklar.append("Fiyat")
        özellikler.append(fiyat_sade)

        # Pandas DataFrame oluşturma
        ev_df = pd.DataFrame(columns=["İlan Numarası", "İlan Güncelleme Tarihi", "Kategorisi", "Net Metrekare",
                                      "Oda Sayısı", "Bulunduğu Kat", "Isıtma Tipi", "Krediye Uygunluk", "Yapı Tipi",
                                      "Takas", "Yapı Durumu", "Site İçerisinde", "Banyo Sayısı", "Balkon Sayısı",
                                      "İpotek Durumu", 'Kira Getirisi', "Fiyat Durumu", ' İlan Oluşturma Tarihi', "Türü",
                                      "Tipi", "WC Metrekare", "Aidat", "Brüt Metrekare", "Binanın Yaşı",
                                      "Binanın Kat Sayısı", "Kullanım Durumu", "Balkon Metrekare", "Banyo Metrekare",
                                      "Yatırıma Uygunluk", "Tapu Durumu", "Eşya Durumu", "Balkon Durumu", "Balkon Tipi",
                                      "Görüntülü Gezilebilir Mi?", "WC Sayısı", "Konum", "Fiyat"])

        # Ev verilerini DataFrame'e ekleme
        for i in range(len(başlıklar)):
            # Gelen ev başlığı
            ev_başlığı = başlıklar[i]

            # Gelen ev özelliği
            ev_özelliği = özellikler[i]

            # Başlık uyumunu kontrol et
            if ev_başlığı in ev_df.columns:
                # Başlık uyumu varsa, ilgili başlık altındaki özelliği ekle
                ev_df.at[0, ev_başlığı] = ev_özelliği
            else:
                pass

        # DataFrame'i CSV dosyasına yazma
        driver.execute_script("window.history.go(-1)")
        if not os.path.isfile("ev_verileri.csv"):
            # Dosya zaten varsa yeniden oluşturmaya gerek yok
            ev_df.to_csv("ev_verileri.csv", encoding="utf-8", index=False)
        else:
            # Dosya henüz oluşturulmamışsa, mode="a" kullanarak append et
            ev_df.to_csv("ev_verileri.csv", encoding="utf-8", index=False, mode="a", header=False)

    except:
        # Hata durumunda geri dönüp başka bir giriş yapma
        url_in = driver.current_url
        print(i, "Hatalı")
        driver.execute_script("window.history.go(-1)")
        if url_in != url:
            driver.get(url)

def listToString(s):
    # initialize an empty string
    str1 = " "
    # return string
    return (str1.join(s))

options = webdriver.ChromeOptions()
options.add_argument( '--no-sandbox' )
options.add_argument( '--headless' )
options.add_argument( '--disable-gpu' )
options.add_argument('--disable-dve-shm-uage')
driver = webdriver.Chrome(options=options)

k = 1
url = "https://www.emlakjet.com/satilik-konut/bursa/"
driver.get(url)
while (k<=50):
    if(k!=1):
        driver.get("https://www.emlakjet.com/satilik-konut/bursa/"+str(k))
        url="https://www.emlakjet.com/satilik-konut/bursa/"+str(k)
    k+=1
    i=1
    while (i<=38):
      Veri_çekme(i,url)
      i+=1

driver.quit()