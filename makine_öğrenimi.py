# -*- coding: utf-8 -*-
"""Makine_Öğrenimi.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1qeMiuBZqw0KtqcLY2xu8uTVr9o1GgII8
"""

!pip install eli5
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error
from sklearn.metrics import r2_score
import numpy as np

from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error
from sklearn.metrics import r2_score

import eli5

from sklearn.ensemble import RandomForestRegressor, GradientBoostingRegressor, VotingRegressor
from xgboost import XGBRegressor
from sklearn.metrics import r2_score

veri = pd.read_csv("düzenlenmiş_veri.csv")
veri

veri['Net Metrekare'] = pd.to_numeric(veri['Net Metrekare'], errors='coerce')
veri['Bulunduğu Kat'] = pd.to_numeric(veri['Bulunduğu Kat'], errors='coerce')
veri['Banyo Sayısı'] = pd.to_numeric(veri['Banyo Sayısı'], errors='coerce')
veri['Brüt Metrekare'] = pd.to_numeric(veri['Brüt Metrekare'], errors='coerce')

x = veri.drop("Fiyat", axis=1)
y = veri["Fiyat"]

trainX, testX, trainY, testY = train_test_split(x,y, test_size=0.33, shuffle=True)

model_rf = RandomForestRegressor()
model_gb = GradientBoostingRegressor()
model_xgb = XGBRegressor()

voting_regressor = VotingRegressor(estimators=[
    ('random_forest', model_rf),
    ('gradient_boosting', model_gb),
    ('xgboost', model_xgb)
])

model_rf.fit(trainX, trainY)
model_gb.fit(trainX, trainY)
model_xgb.fit(trainX, trainY)
voting_regressor.fit(trainX, trainY)

pred_rf = model_rf.predict(testX)
pred_gb = model_gb.predict(testX)
pred_xgb = model_xgb.predict(testX)
pred_voting = voting_regressor.predict(testX)

r2_rf = r2_score(testY, pred_rf)
r2_gb = r2_score(testY, pred_gb)
r2_xgb = r2_score(testY, pred_xgb)
r2_voting = r2_score(testY, pred_voting)

print(f"Random Forest R2 Score: {r2_rf}")
print(f"Gradient Boosting R2 Score: {r2_gb}")
print(f"XGBoost R2 Score: {r2_xgb}")
print(f"Voting Regressor R2 Score: {r2_voting}")

input_names = []
for i in veri.drop(["Fiyat"],axis=1).columns:
    input_names.append(str(i))

eli5.show_weights(model_rf, feature_names=input_names)

eli5.show_weights(model_gb, feature_names=input_names)

eli5.show_weights(model_xgb, feature_names=input_names)

